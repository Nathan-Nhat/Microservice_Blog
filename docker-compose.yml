version: '3.5'
services:
  rabbitmq:
    image: rabbitmq:3.8.3
    container_name: rabbitmq
    restart: always
  auth_service:
    image: auth_service:${TAG}
    restart: always
    build:
        context: ./auth_service
        dockerfile: Dockerfile
    container_name : auth_service
    environment:
    - PYTHONUNBUFFERED=TRUE
    - FLASK_CONFIG=${FLASK_CONFIG}
    - SECRET_KEY=${SECRET_KEY}
    - ITSDANGEROUS_SECRET_KEY=${ITSDANGEROUS_SECRET_KEY}
    - SECRET_JWT_KEY=${SECRET_JWT_KEY}
    - BLOG_ADMIN=${BLOG_ADMIN}  
 #   ports:
 #  - "5000:5000"
    depends_on:
    - mysql
    - rabbitmq
    volumes:
    - ./auth_service:/usr/src/app
  profile_service:
    image: profile_service:${TAG}
    restart: always
    build:
        context: ./profile_service
        dockerfile: Dockerfile
    container_name : profile_service
    environment:
    - PYTHONUNBUFFERED=TRUE
    - FLASK_CONFIG=${FLASK_CONFIG}
    - SECRET_KEY=${SECRET_KEY}
    - ITSDANGEROUS_SECRET_KEY=${ITSDANGEROUS_SECRET_KEY}
    - SECRET_JWT_KEY=${SECRET_JWT_KEY}
    - BLOG_ADMIN=${BLOG_ADMIN}  
 #   ports:
 #  - "5001:5001"
    depends_on:
    - mysql
    volumes:
    - ./profile_service:/usr/src/app
  post_service:
    image: post_service:${TAG}
    restart: always
    build:
        context: ./post_service
        dockerfile: Dockerfile
    container_name : post_service
#    ports:
#    - "5002:5002"
    environment:
    - PYTHONUNBUFFERED=TRUE
    - FLASK_CONFIG=${FLASK_CONFIG}
    - SECRET_KEY=${SECRET_KEY}
    - ITSDANGEROUS_SECRET_KEY=${ITSDANGEROUS_SECRET_KEY}
    - SECRET_JWT_KEY=${SECRET_JWT_KEY}
    - BLOG_ADMIN=${BLOG_ADMIN}  
    depends_on:
    - mysql
    volumes:
    - ./post_service:/usr/src/app
  mail_service:
    image: mail_service:${TAG}
    restart: always
    environment:
      - BUILD_ENV=${FLASK_CONFIG}
    build:
        context: ./mail_service
        dockerfile: Dockerfile
    container_name : mail_service
    volumes:
    - ./mail_service:/usr/src/app
    depends_on:
    - rabbitmq
  mysql:
    image: mysql:8.0.20
    container_name: mysql
    restart: always
    command: "--default-authentication-plugin=mysql_native_password"
    environment:
    - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
    - ./mysql/data:/var/lib/mysql
#  front_end:
#    image: front_end:1.0
#    restart: always
#    build:
#        context: ./blog
#        dockerfile: Dockerfile
#    container_name : front_end
#    stdin_open: true
#    ports:
#    - "2000:3000"
#    volumes:
#    - ./blog:/app
    
  api_gateway:
    image: nginx:1.17.10
    container_name: api_gateway
    ports:
    - "8000:8000"
    volumes:
    - ./api_gateway:/etc/nginx/conf.d
    restart: always

  front_end_production:
    image: fe_production:${TAG}
    container_name: FE_Production
    build:
      context: ./front_end_production
      dockerfile: Dockerfile
    ports:
    - "6196:80"
    volumes:
    - ./front_end_production/build:/usr/share/nginx/html
    - ./front_end_production/config:/etc/nginx/conf.d
    restart: always

  image_service:
    image: image_service:${TAG}
    container_name: image_service
    restart: always
    build:
      context: ./image_service
      dockerfile: Dockerfile
      #  ports:
      #  - "5002:5002"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - FLASK_CONFIG=${FLASK_CONFIG}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    volumes:
      - ./image_service:/usr/src/app
